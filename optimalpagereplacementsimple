#include <stdio.h>
#include <stdbool.h>

bool isInFrame(int frame[], int size, int page) {
    for (int i = 0; i < size; i++) {
        if (frame[i] == page) return true;
    }
    return false;
}

// Prediksi halaman mana yang akan dipakai paling lama ke depan
int predict(int pages[], int n, int frame[], int index, int size) {
    int farthest = index, pos = -1;
    for (int i = 0; i < size; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }
        }
        if (j == n) return i; // Tidak dipakai lagi
    }
    return (pos == -1) ? 0 : pos;
}

void optimal(int pages[], int n, int capacity) {
    int frame[capacity];
    int used = 0, faults = 0;

    for (int i = 0; i < capacity; i++) frame[i] = -1;

    printf("Page\tFrame Status\n");

    for (int i = 0; i < n; i++) {
        printf("%2d\t", pages[i]);

        if (isInFrame(frame, used, pages[i])) {
            for (int j = 0; j < used; j++) printf("%d ", frame[j]);
            printf("(Hit)\n");
            continue;
        }

        faults++;
        if (used < capacity) {
            frame[used++] = pages[i];
        } else {
            int pos = predict(pages, n, frame, i + 1, capacity);
            frame[pos] = pages[i];
        }

        for (int j = 0; j < used; j++) printf("%d ", frame[j]);
        printf("(Fault)\n");
    }

    printf("\nTotal Page Faults: %d\n", faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    optimal(pages, n, capacity);

    return 0;
}
